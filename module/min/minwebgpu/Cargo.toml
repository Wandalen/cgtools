[package]
name = "minwebgpu"
version = "0.1.0"
edition = "2021"
rust-version = "1.75.0"
authors = [
  "Kostiantyn Mysnyk <wandalen@obox.systems>",
  "Avramenko Yevhenii <yevhenii.av@obox.systems>"
]
license = "MIT"
repository = "https://github.com/Wandalen/cgtools"
homepage = "https://github.com/Wandalen/cgtools/tree/master/module/min/minwebgpu"
documentation = "https://docs.rs/minwebgpu"
description = "Minimal WebGPU toolkit for modern graphics programming with compute shaders and rendering pipelines"
readme = "readme.md"
keywords = ["webgpu", "graphics", "minimal", "wasm", "compute"]
categories = ["graphics", "web-programming", "rendering", "wasm"]
include = [
    "src/**/*",
    "tests/**/*",
    "Cargo.toml",
    "readme.md",
    "license*",
    "changelog*",
]


[lints]
workspace = true

[features]

enabled = [
  "dep:mingl",
  "dep:browser_log",
  "dep:wasm-bindgen-futures",
  "dep:wasm-bindgen",
  "dep:js-sys",
  "dep:web-sys",
  "dep:asbytes",
]

default = [
  "enabled",
  "web"
]

full = [
  "default",
  "file",
  "future",
  "model_obj",
  "math",
  "log"
]


web = [ "mingl/web" ] # common web utils
file = [ "mingl/web_file" ] # enable files handling
future = [ "mingl/web_future" ] # enable futures
model_obj = [ "mingl/web_model_obj" ] # enable futures
log = [ "mingl/web_log" ]
math = [ "mingl/math" ]

[dependencies]

mingl = { workspace = true, optional = true }

bytemuck = { workspace = true, optional = true, features = [ "derive" ] }
asbytes = { workspace = true, optional = true }

browser_log = { workspace = true, optional = true }

error_tools = { workspace = true }
mod_interface = { workspace = true }
derive_tools = { workspace = true }
former = { workspace = true }

wasm-bindgen-futures = { workspace = true, optional = true }
wasm-bindgen = { workspace = true, optional = true }
js-sys = { workspace = true, optional = true }
web-sys = { workspace = true, optional = true, features = [
  'Navigator',
  'Gpu',
  'GpuCanvasContext',
  'GpuCanvasConfiguration',
  'GpuTextureFormat',
  'GpuAdapter',
  'GpuDevice',
  'GpuQueue',

  'GpuTexture',
  'GpuTextureDescriptor',
  'GpuTextureDimension',
  'GpuTextureFormat',

  'GpuSampler',
  'GpuSamplerDescriptor',
  'GpuFilterMode',
  'GpuAddressMode',
  'GpuCompareFunction',
  'GpuMipmapFilterMode',

  'GpuVertexBufferLayout',
  'GpuVertexStepMode',
  'GpuVertexAttribute',
  'GpuVertexFormat',

  'GpuBindGroupLayout',
  'GpuBindGroupLayoutDescriptor',
  'GpuBindGroupLayoutEntry',
  'GpuBufferBindingLayout',
  'GpuBufferBindingType',
  'GpuSamplerBindingLayout',
  'GpuSamplerBindingType',
  'GpuTextureBindingLayout',
  'GpuTextureSampleType',
  'GpuTextureViewDimension',
  'GpuStorageTextureBindingLayout',
  'GpuStorageTextureAccess',
  'GpuExternalTextureBindingLayout',

  'GpuRenderPipeline',
  'GpuPipelineLayout',
  'GpuPipelineLayoutDescriptor',
  'GpuShaderModule',
  'GpuShaderModuleDescriptor',
  'GpuVertexState',
  'GpuBlendState',
  'GpuBlendComponent',
  'GpuBlendFactor',
  'GpuBlendOperation',
  'GpuColorTargetState',
  'GpuFragmentState',

  'GpuPrimitiveState',
  'GpuCullMode',
  'GpuFrontFace',
  'GpuPrimitiveTopology',
  'GpuIndexFormat',
  'GpuDepthStencilState',
  'GpuStencilFaceState',
  'GpuStencilOperation',
  'GpuMultisampleState',

  'GpuRenderPipelineDescriptor',
  'GpuRenderPassDescriptor',
  'GpuRenderPassDepthStencilAttachment',
  'GpuRenderPassColorAttachment',
  'GpuLoadOp',
  'GpuStoreOp',
  'GpuTextureView',
  'GpuTextureViewDescriptor',

  'GpuCommandEncoder',
  'GpuCommandBuffer',
  'GpuRenderPassEncoder',

  'GpuBindGroup',
  'GpuExternalTexture',
  'GpuBufferBinding',
  'GpuBindGroupEntry',
  'GpuBindGroupDescriptor',
  'GpuBuffer',
  'GpuBufferDescriptor',

  'GpuProgrammableStage',
  'GpuComputePipelineDescriptor',
  'GpuComputePipeline',
  'GpuComputePassEncoder',

  'gpu_texture_usage',
  'gpu_shader_stage',
  'gpu_color_write',
  'gpu_buffer_usage',
]}

[dev-dependencies]
test_tools = { workspace = true }

# Metadata for crates.io
[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
default-target = "wasm32-unknown-unknown"
targets = [
    "wasm32-unknown-unknown",
    "x86_64-unknown-linux-gnu",
    "x86_64-pc-windows-msvc",
    "x86_64-apple-darwin",
]

# Cargo.toml maintenance metadata
[package.metadata.release]
pre-release-replacements = [
    { file = "readme.md", search = "minwebgpu = \"[0-9.]+\"", replace = "minwebgpu = \"{{version}}\"" },
    { file = "changelog.md", search = "## Unreleased", replace = "## Unreleased\n\n## {{version}} - {{date}}" },
]
